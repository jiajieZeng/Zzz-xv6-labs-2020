diff --git a/grade-lab-pgtbl b/grade-lab-pgtbl
index 2b0b49d..e17c4d2 100755
--- a/grade-lab-pgtbl
+++ b/grade-lab-pgtbl
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 import re
 from gradelib import *
diff --git a/kernel/defs.h b/kernel/defs.h
index a73b4f7..edc8c14 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -160,7 +160,7 @@ int             uartgetc(void);
 // vm.c
 void            kvminit(void);
 void            kvminithart(void);
-uint64          kvmpa(uint64);
+uint64          kvmpa(pagetable_t, uint64);
 void            kvmmap(uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
@@ -178,6 +178,15 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+//add vm.c
+void            vmprint(pagetable_t);
+void            rec_vmprint(pagetable_t, int);
+void            proc_kvmmap(pagetable_t, uint64, uint64, uint64, int);
+pagetable_t     proc_kvminit();
+void            proc_freekernelpagetable(pagetable_t);
+void            vmcopypagetable(pagetable_t, pagetable_t, uint64, uint64);
+int             copyin_new(pagetable_t, char *, uint64, uint64);
+int             copyinstr_new(pagetable_t, char *, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 0e8762f..1f03fbd 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -115,7 +115,8 @@ exec(char *path, char **argv)
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
-
+  if (p->pid == 1) vmprint(p->pagetable);
+  vmcopypagetable(p->pagetable, p->kernel_pagetable, 0, sz);
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index dab1e1d..0a07cc8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -34,12 +34,12 @@ procinit(void)
       // Allocate a page for the process's kernel stack.
       // Map it high in memory, followed by an invalid
       // guard page.
-      char *pa = kalloc();
-      if(pa == 0)
-        panic("kalloc");
-      uint64 va = KSTACK((int) (p - proc));
-      kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
-      p->kstack = va;
+      // char *pa = kalloc();
+      // if(pa == 0)
+        // panic("kalloc");
+      // uint64 va = KSTACK((int) (p - proc));
+      // kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+      // p->kstack = va;
   }
   kvminithart();
 }
@@ -120,7 +120,20 @@ found:
     release(&p->lock);
     return 0;
   }
+  
+  p->kernel_pagetable = proc_kvminit();
+  if (p->kernel_pagetable == 0) {
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
 
+  char *pa = kalloc();
+  if(pa == 0)
+    panic("kalloc");
+  uint64 va = KSTACK((int)(p - proc));
+  proc_kvmmap(p->kernel_pagetable, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+  p->kstack = va;
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -149,6 +162,15 @@ freeproc(struct proc *p)
   p->chan = 0;
   p->killed = 0;
   p->xstate = 0;
+
+  if (p->kstack) {
+    uvmunmap(p->kernel_pagetable, p->kstack, 1, 1);
+  }
+  p->kstack = 0;
+  if (p->kernel_pagetable) {
+    proc_freekernelpagetable(p->kernel_pagetable);
+  }
+  p->kernel_pagetable = 0;
   p->state = UNUSED;
 }
 
@@ -229,7 +251,7 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
-
+  vmcopypagetable(p->pagetable, p->kernel_pagetable, 0, p->sz);
   release(&p->lock);
 }
 
@@ -294,7 +316,7 @@ fork(void)
   pid = np->pid;
 
   np->state = RUNNABLE;
-
+  vmcopypagetable(np->pagetable, np->kernel_pagetable, 0, np->sz);
   release(&np->lock);
 
   return pid;
@@ -473,6 +495,8 @@ scheduler(void)
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+        w_satp(MAKE_SATP(p->kernel_pagetable));
+        sfence_vma();
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
@@ -483,6 +507,9 @@ scheduler(void)
       }
       release(&p->lock);
     }
+    if (found == 0) {
+        kvminithart();
+    }
 #if !defined (LAB_FS)
     if(found == 0) {
       intr_on();
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..c5d4d43 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  pagetable_t kernel_pagetable; //add
+
 };
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..e5b3919 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -49,6 +49,13 @@ sys_sbrk(void)
   addr = myproc()->sz;
   if(growproc(n) < 0)
     return -1;
+  if (n > 0) {
+    vmcopypagetable(myproc()->pagetable, myproc()->kernel_pagetable, addr, n);
+  } else {
+    for (int j = addr - PGSIZE; j >= addr + n; j -= PGSIZE) {
+        uvmunmap(myproc()->kernel_pagetable, j, 1, 0);
+    }
+  }
   return addr;
 }
 
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
index 06e0645..00d1ee5 100644
--- a/kernel/virtio_disk.c
+++ b/kernel/virtio_disk.c
@@ -16,7 +16,7 @@
 #include "fs.h"
 #include "buf.h"
 #include "virtio.h"
-
+#include "proc.h"
 // the address of virtio mmio register r.
 #define R(r) ((volatile uint32 *)(VIRTIO0 + (r)))
 
@@ -203,7 +203,7 @@ virtio_disk_rw(struct buf *b, int write)
 
   // buf0 is on a kernel stack, which is not direct mapped,
   // thus the call to kvmpa().
-  disk.desc[idx[0]].addr = (uint64) kvmpa((uint64) &buf0);
+  disk.desc[idx[0]].addr = (uint64) kvmpa(myproc()->kernel_pagetable, (uint64) &buf0);
   disk.desc[idx[0]].len = sizeof(buf0);
   disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
   disk.desc[idx[0]].next = idx[1];
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..26a9197 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -47,6 +47,39 @@ kvminit()
   kvmmap(TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
 }
 
+//add
+pagetable_t
+proc_kvminit() {
+  pagetable_t kpagetable = uvmcreate();
+  if( kpagetable == 0) {
+    return 0;
+  }
+  memset(kpagetable, 0, PGSIZE);
+
+  // uart registers
+  proc_kvmmap(kpagetable, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+
+  // virtio mmio disk interface
+  proc_kvmmap(kpagetable, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+
+  // CLINT
+  proc_kvmmap(kpagetable, CLINT, CLINT, 0x10000, PTE_R | PTE_W);
+
+  // PLIC
+  proc_kvmmap(kpagetable, PLIC, PLIC, 0x400000, PTE_R | PTE_W);
+
+  // map kernel text executable and read-only.
+  proc_kvmmap(kpagetable, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+
+  // map kernel data and the physical RAM we'll make use of.
+  proc_kvmmap(kpagetable, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  proc_kvmmap(kpagetable, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+  return kpagetable;
+}
+
 // Switch h/w page table register to the kernel's page table,
 // and enable paging.
 void
@@ -121,18 +154,25 @@ kvmmap(uint64 va, uint64 pa, uint64 sz, int perm)
     panic("kvmmap");
 }
 
+//added
+void proc_kvmmap(pagetable_t pagetable, uint64 va, uint64 pa, uint64 sz, int perm) {
+    if (mappages(pagetable, va, sz, pa, perm) != 0) {
+        panic("proc_kvmmap");
+    }
+}
+
 // translate a kernel virtual address to
 // a physical address. only needed for
 // addresses on the stack.
 // assumes va is page aligned.
 uint64
-kvmpa(uint64 va)
+kvmpa(pagetable_t pagetable, uint64 va)
 {
   uint64 off = va % PGSIZE;
   pte_t *pte;
   uint64 pa;
   
-  pte = walk(kernel_pagetable, va, 0);
+  pte = walk(pagetable, va, 0);
   if(pte == 0)
     panic("kvmpa");
   if((*pte & PTE_V) == 0)
@@ -269,6 +309,27 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+static char *dots[] = {"..", ".. ..", ".. .. .."};
+
+//add
+void vmprint(pagetable_t pagetable) {
+   printf("page table %p\n", pagetable);
+   rec_vmprint(pagetable, 0);
+}
+
+void rec_vmprint(pagetable_t pagetable, int deep) {
+    if (deep > 2) return;
+    for (int i = 0; i < 512; i++) {
+        pte_t pte = pagetable[i];
+        if((pte & PTE_V)){
+            // this PTE points to a lower-level page table.
+            uint64 child = PTE2PA(pte);
+            printf("%s%d: pte %p pa %p\n", dots[deep], i, pte, child);
+            rec_vmprint((pagetable_t)child, deep + 1);
+        }
+    }
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -289,6 +350,21 @@ freewalk(pagetable_t pagetable)
   kfree((void*)pagetable);
 }
 
+//add
+void proc_freekernelpagetable(pagetable_t pagetable) {
+    for (int i = 0; i < 512; i++) {
+        pte_t pte = pagetable[i];
+        if (pte & PTE_V) {
+            pagetable[i] = 0;
+            if ((pte & (PTE_R | PTE_W | PTE_X)) == 0) {
+                uint64 child = PTE2PA(pte);
+                proc_freekernelpagetable((pagetable_t)child);
+            }
+        }
+    }
+    kfree((void*)pagetable);
+}
+
 // Free user memory pages,
 // then free page-table pages.
 void
@@ -373,13 +449,35 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   return 0;
 }
 
+//vmcopypagetable 将进程中的用户页表复制到内核页表
+void vmcopypagetable(pagetable_t pagetable, pagetable_t kpagetable, uint64 srcva, uint64 len) {
+    if (srcva + len >= PLIC) {
+        panic("vmcopypagetable: too large newsz");
+    }
+    for (uint64 i = srcva; i < srcva + len; i += PGSIZE) {
+        pte_t *pte = walk(pagetable, i, 0);
+        if (pte == 0) {
+            panic("no such user pte");
+        }
+        if ((*pte & PTE_V) == 0) {
+            panic("pte not valid");
+        }
+        pte_t *kpte = walk(kpagetable, i, 1);
+        if (kpte == 0) {
+            panic("no such kernel pte");
+        }
+        //复制并且关闭读写权限，用户权限
+        *kpte = (*pte & ~(PTE_W | PTE_U | PTE_X));
+    }
+}
+
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int
 copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 {
-  uint64 n, va0, pa0;
+/*  uint64 n, va0, pa0;
 
   while(len > 0){
     va0 = PGROUNDDOWN(srcva);
@@ -396,6 +494,8 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
     srcva = va0 + PGSIZE;
   }
   return 0;
+*/
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -405,7 +505,7 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 int
 copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 {
-  uint64 n, va0, pa0;
+/*  uint64 n, va0, pa0;
   int got_null = 0;
 
   while(got_null == 0 && max > 0){
@@ -439,4 +539,6 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
   } else {
     return -1;
   }
+*/
+  return copyinstr_new(pagetable, dst, srcva, max);
 }
