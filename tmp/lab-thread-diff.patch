diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..fb458f4 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -20,6 +20,7 @@ barrier_init(void)
   assert(pthread_mutex_init(&bstate.barrier_mutex, NULL) == 0);
   assert(pthread_cond_init(&bstate.barrier_cond, NULL) == 0);
   bstate.nthread = 0;
+  bstate.round = 0;
 }
 
 static void 
@@ -30,7 +31,16 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  ++bstate.nthread;
+  if (bstate.nthread < nthread) {
+    pthread_cond_wait(&bstate.barrier_cond, &bstate.barrier_mutex);
+  } else {
+    ++bstate.round;
+    bstate.nthread = 0;
+    pthread_cond_broadcast(&bstate.barrier_cond);
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 6df1500..147632d 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -16,6 +16,7 @@ struct entry {
 struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
+pthread_mutex_t lock[NBUCKET];
 
 double
 now()
@@ -39,13 +40,13 @@ static
 void put(int key, int value)
 {
   int i = key % NBUCKET;
-
   // is the key already present?
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
     if (e->key == key)
       break;
   }
+  pthread_mutex_lock(&lock[i]);
   if(e){
     // update the existing key.
     e->value = value;
@@ -53,19 +54,21 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
+  pthread_mutex_unlock(&lock[i]);
 }
 
 static struct entry*
 get(int key)
 {
   int i = key % NBUCKET;
-
-
+  pthread_mutex_lock(&lock[i]);
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
+    // pthread_mutex_lock(&lock);
     if (e->key == key) break;
+    // pthread_mutex_unlock(&lock);
   }
-
+  pthread_mutex_unlock(&lock[i]);
   return e;
 }
 
@@ -107,6 +110,9 @@ main(int argc, char *argv[])
     fprintf(stderr, "Usage: %s nthreads\n", argv[0]);
     exit(-1);
   }
+  for (int i = 0; i < NBUCKET; i++) {
+    pthread_mutex_init(&lock[i], NULL);
+  }
   nthread = atoi(argv[1]);
   tha = malloc(sizeof(pthread_t) * nthread);
   srandom(0);
diff --git a/user/uthread.c b/user/uthread.c
index 8e46826..4e21761 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,15 +10,33 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+struct context {
+    uint64 ra;
+    uint64 sp;
+
+    // callee-saved
+    uint64 s0;
+    uint64 s1;
+    uint64 s2; 
+    uint64 s3;
+    uint64 s4;
+    uint64 s5;
+    uint64 s6;
+    uint64 s7;
+    uint64 s8;
+    uint64 s9;
+    uint64 s10;
+    uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
-
+  struct context tcontext;      /* thread's context*/
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
-extern void thread_switch(uint64, uint64);
+extern void thread_switch(struct context *old, struct context *new);
               
 void 
 thread_init(void)
@@ -63,6 +81,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch(&t->tcontext, &current_thread->tcontext);
   } else
     next_thread = 0;
 }
@@ -77,6 +96,8 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->tcontext.ra = (uint64)func;
+  t->tcontext.sp = (uint64)&t->stack + STACK_SIZE;
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..be5807e 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -8,4 +8,33 @@
 	.globl thread_switch
 thread_switch:
 	/* YOUR CODE HERE */
-	ret    /* return to ra */
+    sd ra, 0(a0)	
+    sd sp, 8(a0)	
+    sd s0, 16(a0)	
+    sd s1, 24(a0)	
+    sd s2, 32(a0)	
+    sd s3, 40(a0)	
+    sd s4, 48(a0)	
+    sd s5, 56(a0)	
+    sd s6, 64(a0)	
+    sd s7, 72(a0)	
+    sd s8, 80(a0)	
+    sd s9, 88(a0)	
+    sd s10, 96(a0)	
+    sd s11, 104(a0)	
+    
+    ld ra, 0(a1)	
+    ld sp, 8(a1)	
+    ld s0, 16(a1)	
+    ld s1, 24(a1)	
+    ld s2, 32(a1)	
+    ld s3, 40(a1)	
+    ld s4, 48(a1)	
+    ld s5, 56(a1)	
+    ld s6, 64(a1)	
+    ld s7, 72(a1)	
+    ld s8, 80(a1)	
+    ld s9, 88(a1)	
+    ld s10, 96(a1)	
+    ld s11, 104(a1)	
+    ret    /* return to ra */
