diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..ae6d5a6 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,8 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            addref(void *);
+void*           cowpage(void *);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -171,6 +173,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             checkpte(uint64);
+int             cowfork(uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..5d7ddab 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -9,11 +9,17 @@
 #include "riscv.h"
 #include "defs.h"
 
+
+#define PGTBL_INDEX(p) (((uint64)(p) - KERNBASE) / PGSIZE)
+
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+struct spinlock refmutex;
+int refcount[PGTBL_INDEX(PHYSTOP)];
+
 struct run {
   struct run *next;
 };
@@ -27,6 +33,7 @@ void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  initlock(&refmutex, "ref");
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -39,6 +46,35 @@ freerange(void *pa_start, void *pa_end)
     kfree(p);
 }
 
+void addref(void *pa) {
+   acquire(&refmutex);
+   refcount[PGTBL_INDEX(pa)]++;
+   release(&refmutex);
+}
+
+void *cowpage(void *pa) {
+
+    uint64 mem;
+
+    acquire(&refmutex);
+    if (refcount[PGTBL_INDEX(pa)] <= 1) {
+        release(&refmutex);
+        return pa;
+    }
+
+    mem = (uint64)kalloc();
+    if (mem == 0) {
+        release(&refmutex);
+        return 0;
+    }
+    memmove((void *)mem, (void *)pa, PGSIZE);
+    --refcount[PGTBL_INDEX(pa)];
+    release(&refmutex);
+
+    return (void *)mem;
+
+}
+
 // Free the page of physical memory pointed at by v,
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
@@ -51,15 +87,20 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
+  acquire(&refmutex);
+  if (--refcount[PGTBL_INDEX(pa)] <= 0) {
 
-  r = (struct run*)pa;
+      // Fill with junk to catch dangling refs.
+      memset(pa, 1, PGSIZE);
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+      r = (struct run*)pa;
+
+      acquire(&kmem.lock);
+      r->next = kmem.freelist;
+      kmem.freelist = r;
+      release(&kmem.lock);
+  }
+  release(&refmutex);
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -76,7 +117,9 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r) {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    refcount[PGTBL_INDEX(r)] = 1;
+  }
   return (void*)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 0aec003..83a9e32 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,6 +331,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_RSW (1L << 8)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..fc64d30 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -6,9 +6,11 @@
 #include "proc.h"
 #include "defs.h"
 
+
 struct spinlock tickslock;
 uint ticks;
 
+
 extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
@@ -67,6 +69,11 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  } else if(r_scause() == 1 && checkpte(r_stval())) {
+    if (cowfork(r_stval()) == -1) {
+        p->killed = 1;
+    }
+
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..1b5d236 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -311,22 +313,32 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+    // pa = PTE2PA(*pte);
+    // flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+      // goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+      // kfree(mem);
+      // goto err;
+    // }
     pa = PTE2PA(*pte);
+    if (*pte & PTE_W) {
+        *pte &= ~(PTE_W);
+        *pte |= PTE_RSW;
+    }
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
-      goto err;
+    if (mappages(new, i, PGSIZE, pa, flags) != 0) {
+        goto err;
     }
+    addref((void *)pa);
   }
   return 0;
 
@@ -348,6 +360,41 @@ uvmclear(pagetable_t pagetable, uint64 va)
   *pte &= ~PTE_U;
 }
 
+int checkpte(uint64 va) {
+    struct proc *p = myproc();
+    pte_t *pte;
+         
+    return ((va < p->sz) && ((pte = walk(p->pagetable, va, 0)) != 0) 
+            && (*pte & PTE_V) && (*pte & PTE_RSW));
+}
+
+int cowfork(uint64 va) {
+    struct proc *p = myproc();
+    pte_t *pte;
+    uint64 pa, mem;
+    uint64 flags;
+    if ((pte = walk(p->pagetable, va, 0)) == 0) {
+        return -1;
+    }
+
+    pa = PTE2PA(*pte);
+    mem = (uint64)cowpage((void *)pa);
+    if (mem == 0) {
+        return -1;
+    }
+
+    flags = PTE_FLAGS(*pte);
+    flags |= PTE_W;
+    flags &= ~(PTE_RSW);
+    
+    uvmunmap(p->pagetable, PGROUNDDOWN(va), 1, 0);
+    if (mappages(p->pagetable, va, 1, mem, flags) == -1) {
+        return -1;
+    }
+
+    return 1;
+}
+
 // Copy from kernel to user.
 // Copy len bytes from src to virtual address dstva in a given page table.
 // Return 0 on success, -1 on error.
@@ -357,6 +404,9 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   uint64 n, va0, pa0;
 
   while(len > 0){
+    if (checkpte(dstva)) {
+        cowfork(dstva);
+    }
     va0 = PGROUNDDOWN(dstva);
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..b35c491
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+72           
