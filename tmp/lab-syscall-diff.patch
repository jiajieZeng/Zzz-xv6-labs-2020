diff --git a/Makefile b/Makefile
index f0beb51..26783ee 100644
--- a/Makefile
+++ b/Makefile
@@ -149,8 +149,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 ifeq ($(LAB),trap)
 UPROGS += \
diff --git a/grade-lab-syscall b/grade-lab-syscall
index 57c975e..3f593de 100755
--- a/grade-lab-syscall
+++ b/grade-lab-syscall
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin python
 
 import re
 from gradelib import *
diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..abe54ac 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -104,6 +104,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          collectFreeMemory(void);
+uint64          collectProcesses(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..254bc42 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,13 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+uint64 collectFreeMemory(void) {
+    struct run *r = kmem.freelist;
+    uint64 n = 0;
+    while (r) {
+        n++;
+        r = r->next;
+    }
+    return n * PGSIZE;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 6afafa1..6207527 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -21,6 +21,7 @@ static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
 
+
 // initialize the proc table at boot time.
 void
 procinit(void)
@@ -274,9 +275,9 @@ fork(void)
     return -1;
   }
   np->sz = p->sz;
-
+  
   np->parent = p;
-
+  np->mask = p->mask;   //add
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -693,3 +694,14 @@ procdump(void)
     printf("\n");
   }
 }
+
+uint64 collectProcesses(void) {
+    uint64 num = 0;
+    struct proc *pp;
+    for (pp = proc; pp < &proc[NPROC]; pp++) {
+        acquire(&pp->lock);
+        if (pp->state != UNUSED) num++;
+        release(&pp->lock);
+    }
+    return num;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..0b42817 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -93,7 +93,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
-
+  uint64 mask;                    // For trace 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
   uint64 sz;                   // Size of process memory (bytes)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..58631b0 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,14 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+char* getname[] = {" ", "fork", "exit", "wait", "pipe", "read", "kill",
+"exec", "fstat", "chdir", "dup", "getpid", "sbrk", "sleep",
+"uptime", "open", "write", "mknod", "unlink", "link", 
+"mkdir", "close", "trace", "sysinfo"
 };
 
 void
@@ -138,6 +148,10 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    if ((1 << num) & p->mask) {
+        printf("%d: syscall %s -> %d\n", p->pid, getname[num], p->trapframe->a0);
+    }
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7da94ca 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22   //add
+#define SYS_sysinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..5e3d843 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "kernel/sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -95,3 +96,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//added
+uint64
+sys_trace(void) {
+    uint64 p;
+    int n = argaddr(0, &p);
+    if (n == -1) {
+        return -1;
+    } else {
+        myproc()->mask = p;
+    }
+    return 0;
+}
+
+uint64 sys_sysinfo(void) {
+    struct sysinfo info;
+    struct proc *p = myproc();
+    uint64 addr;
+    if (argaddr(0, &addr) < 0) {
+        return -1;
+    }
+    info.freemem = collectFreeMemory();
+    info.nproc = collectProcesses();
+    if (copyout(p->pagetable, addr, (char*)&info, sizeof(info)) < 0) {
+        return -1;
+    }
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index b71ecda..c848925 100644
--- a/user/user.h
+++ b/user/user.h
@@ -24,6 +24,12 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+//
+//add
+int trace(int); 
+struct sysinfo;
+int sysinfo(struct sysinfo *);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
